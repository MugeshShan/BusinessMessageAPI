//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace BusinessMessage.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "http://businesscommunications.googleapis.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Updates the verification state for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `agentVerification.name`. Required. The identifier for verification.</param>
        /// <param name="agentsId">Part of `agentVerification.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agentVerification">Required. The verification info to be updated with.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> UpdateAgentVerificationAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1AgentVerification agentVerification)
        {
            return UpdateAgentVerificationAsync(brandsId, agentsId, updateMask, agentVerification, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the verification state for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `agentVerification.name`. Required. The identifier for verification.</param>
        /// <param name="agentsId">Part of `agentVerification.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agentVerification">Required. The verification info to be updated with.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> UpdateAgentVerificationAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1AgentVerification agentVerification, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/verification?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(agentVerification, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentVerification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the verification information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand and agent verification.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> GetAgentVerificationAsync(string brandsId, string agentsId)
        {
            return GetAgentVerificationAsync(brandsId, agentsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the verification information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand and agent verification.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> GetAgentVerificationAsync(string brandsId, string agentsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/verification");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentVerification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new agent to represent a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand the agent represents. If the brand identifier is "1234", this parameter is "brands/1234".</param>
        /// <param name="agent">Required. Agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> CreateAgentAsync(string brandsId, GoogleCommunicationsBusinesscommunicationsV1Agent agent)
        {
            return CreateAgentAsync(brandsId, agent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new agent to represent a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand the agent represents. If the brand identifier is "1234", this parameter is "brands/1234".</param>
        /// <param name="agent">Required. Agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> CreateAgentAsync(string brandsId, GoogleCommunicationsBusinesscommunicationsV1Agent agent, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(agent, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Agent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists all the agents associated with a brand. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="pageSize">Specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListAgentsResponse> ListAgentsAsync(string brandsId, int? pageSize, string pageToken)
        {
            return ListAgentsAsync(brandsId, pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists all the agents associated with a brand. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="pageSize">Specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListAgentsResponse> ListAgentsAsync(string brandsId, int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListAgentsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists all Google predefined survey questions. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="locale">Optional. List Google template questions by locale. Locale is represented by a well-formed IETF BCP 47 language tag. Default is EN.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListSurveyQuestionsResponse> ListSurveyQuestionsAsync(string locale)
        {
            return ListSurveyQuestionsAsync(locale, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists all Google predefined survey questions. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="locale">Optional. List Google template questions by locale. Locale is represented by a well-formed IETF BCP 47 language tag. Default is EN.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListSurveyQuestionsResponse> ListSurveyQuestionsAsync(string locale, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/surveyQuestions?");
            if (locale != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("locale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListSurveyQuestionsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates the information about a greeting. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `greeting.name`. Output only. The name of the greeting, as set by Business Messages. Resolves to "brands/{brand_id}/agents/{agent_id}/greetings/{greeting_id}" where {greeting_id} is the unique ID of the greeting.</param>
        /// <param name="agentsId">Part of `greeting.name`. See documentation of `brandsId`.</param>
        /// <param name="greetingsId">Part of `greeting.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="greeting">Required. Greeting information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> UpdateGreetingAsync(string brandsId, string agentsId, string greetingsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Greeting greeting)
        {
            return UpdateGreetingAsync(brandsId, agentsId, greetingsId, updateMask, greeting, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the information about a greeting. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `greeting.name`. Output only. The name of the greeting, as set by Business Messages. Resolves to "brands/{brand_id}/agents/{agent_id}/greetings/{greeting_id}" where {greeting_id} is the unique ID of the greeting.</param>
        /// <param name="agentsId">Part of `greeting.name`. See documentation of `brandsId`.</param>
        /// <param name="greetingsId">Part of `greeting.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="greeting">Required. Greeting information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> UpdateGreetingAsync(string brandsId, string agentsId, string greetingsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Greeting greeting, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            if (greetingsId == null)
                throw new System.ArgumentNullException("greetingsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/greetings/{greetingsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{greetingsId}", System.Uri.EscapeDataString(ConvertToString(greetingsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(greeting, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Greeting>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the greeting information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the greeting. If the brand ID is "1234", agent ID is "5678", and greeting ID is "abcd", this parameter resolves to "brands/1234/agents/5678/greetings/abcd".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="greetingsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> GetGreetingAsync(string brandsId, string agentsId, string greetingsId)
        {
            return GetGreetingAsync(brandsId, agentsId, greetingsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the greeting information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the greeting. If the brand ID is "1234", agent ID is "5678", and greeting ID is "abcd", this parameter resolves to "brands/1234/agents/5678/greetings/abcd".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="greetingsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> GetGreetingAsync(string brandsId, string agentsId, string greetingsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            if (greetingsId == null)
                throw new System.ArgumentNullException("greetingsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/greetings/{greetingsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{greetingsId}", System.Uri.EscapeDataString(ConvertToString(greetingsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Greeting>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Begins the launch process for an agent. An agent is available to users after it launches. An agent can only have one instance of launch at a time.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> RequestAgentLaunchAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1RequestAgentLaunchRequest body)
        {
            return RequestAgentLaunchAsync(brandsId, agentsId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Begins the launch process for an agent. An agent is available to users after it launches. An agent can only have one instance of launch at a time.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> RequestAgentLaunchAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1RequestAgentLaunchRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}:requestLaunch");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new brand.
        /// </remarks>
        /// <param name="brand">Required. Brand information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> CreateBrandAsync(GoogleCommunicationsBusinesscommunicationsV1Brand brand)
        {
            return CreateBrandAsync(brand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new brand.
        /// </remarks>
        /// <param name="brand">Required. Brand information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> CreateBrandAsync(GoogleCommunicationsBusinesscommunicationsV1Brand brand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(brand, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Brand>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists all the brands accessible to the user making the request. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="pageSize">Specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListBrandsResponse> ListBrandsAsync(int? pageSize, string pageToken)
        {
            return ListBrandsAsync(pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists all the brands accessible to the user making the request. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="pageSize">Specify the maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListBrandsResponse> ListBrandsAsync(int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands?");
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListBrandsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get information about an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5668".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> GetAgentAsync(string brandsId, string agentsId)
        {
            return GetAgentAsync(brandsId, agentsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get information about an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5668".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> GetAgentAsync(string brandsId, string agentsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Agent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates information about an agent. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `agent.name`. The unique identifier of the agent. Read-only. Defined by the platform.</param>
        /// <param name="agentsId">Part of `agent.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agent">Required. Agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> UpdateAgentAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Agent agent)
        {
            return UpdateAgentAsync(brandsId, agentsId, updateMask, agent, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates information about an agent. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `agent.name`. The unique identifier of the agent. Read-only. Defined by the platform.</param>
        /// <param name="agentsId">Part of `agent.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agent">Required. Agent information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Agent> UpdateAgentAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Agent agent, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(agent, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Agent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Deletes an agent. The delete request fails if any `brands.agents.requestVerification` requests have been made for the agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5668".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteAgentAsync(string brandsId, string agentsId)
        {
            return DeleteAgentAsync(brandsId, agentsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes an agent. The delete request fails if any `brands.agents.requestVerification` requests have been made for the agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5668".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteAgentAsync(string brandsId, string agentsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleProtobufEmpty>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// List integrations.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="pageSize">Currently this field is unsupported because the number of agent-level integrations is too few for pagination to be needed. This field will be ignored if passed. Specify the maximum number of results for the server to return. The server may further limit the maximum number of results returned per page. If the page_size is 0, the server will decide how many results are returned. Optional</param>
        /// <param name="pageToken">Currently this field is unsupported as the number of agent-level integrations is too few for pagination to be needed. This field will be ignored if passed. The next_page_token value returned from a previous List request, if any. Optional</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListIntegrationsResponse> ListIntegrationsAsync(string brandsId, string agentsId, int? pageSize, string pageToken)
        {
            return ListIntegrationsAsync(brandsId, agentsId, pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// List integrations.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="pageSize">Currently this field is unsupported because the number of agent-level integrations is too few for pagination to be needed. This field will be ignored if passed. Specify the maximum number of results for the server to return. The server may further limit the maximum number of results returned per page. If the page_size is 0, the server will decide how many results are returned. Optional</param>
        /// <param name="pageToken">Currently this field is unsupported as the number of agent-level integrations is too few for pagination to be needed. This field will be ignored if passed. The next_page_token value returned from a previous List request, if any. Optional</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListIntegrationsResponse> ListIntegrationsAsync(string brandsId, string agentsId, int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/integrations?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListIntegrationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Create an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="integration">Required. Integration information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> CreateIntegrationAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1Integration integration)
        {
            return CreateIntegrationAsync(brandsId, agentsId, integration, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand identifier is "1234" and the agent identifier is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="integration">Required. Integration information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> CreateIntegrationAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1Integration integration, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/integrations");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(integration, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Integration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Begins business information verification for an agent. Google contacts the brand for verification. Only 1 instance of verification is allowed at any given time.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand and agent.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> RequestAgentVerificationAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1RequestAgentVerificationRequest body)
        {
            return RequestAgentVerificationAsync(brandsId, agentsId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Begins business information verification for an agent. Google contacts the brand for verification. Only 1 instance of verification is allowed at any given time.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand and agent.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentVerification> RequestAgentVerificationAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1RequestAgentVerificationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}:requestVerification");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentVerification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new location for a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand associated with the location. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="location">Required. Location information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> CreateLocationAsync(string brandsId, GoogleCommunicationsBusinesscommunicationsV1Location location)
        {
            return CreateLocationAsync(brandsId, location, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new location for a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand associated with the location. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="location">Required. Location information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> CreateLocationAsync(string brandsId, GoogleCommunicationsBusinesscommunicationsV1Location location, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(location, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists all the locations for a brand. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="pageSize">The maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListLocationsResponse> ListLocationsAsync(string brandsId, int? pageSize, string pageToken)
        {
            return ListLocationsAsync(brandsId, pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists all the locations for a brand. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="pageSize">The maximum number of results to be returned by the server. The server may further constrain the maximum number of results returned in a single page. If the page_size is 0, the server will decide the number of results to be returned.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListLocationsResponse> ListLocationsAsync(string brandsId, int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListLocationsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates the information for a partner.
        /// </remarks>
        /// <param name="partnersId">Part of `partner.name`. Immutable. The unique identifier of the partner. Defined by the platform.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="partner">Required. The location launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Partner> UpdatePartnerAsync(string partnersId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Partner partner)
        {
            return UpdatePartnerAsync(partnersId, updateMask, partner, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the information for a partner.
        /// </remarks>
        /// <param name="partnersId">Part of `partner.name`. Immutable. The unique identifier of the partner. Defined by the platform.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="partner">Required. The location launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Partner> UpdatePartnerAsync(string partnersId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Partner partner, System.Threading.CancellationToken cancellationToken)
        {
            if (partnersId == null)
                throw new System.ArgumentNullException("partnersId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/partners/{partnersId}?");
            urlBuilder_.Replace("{partnersId}", System.Uri.EscapeDataString(ConvertToString(partnersId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(partner, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Partner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get the information about the partner.
        /// </remarks>
        /// <param name="partnersId">Part of `name`. Optional. The unique identifier of the partner.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Partner> GetPartnerAsync(string partnersId)
        {
            return GetPartnerAsync(partnersId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the information about the partner.
        /// </remarks>
        /// <param name="partnersId">Part of `name`. Optional. The unique identifier of the partner.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Partner> GetPartnerAsync(string partnersId, System.Threading.CancellationToken cancellationToken)
        {
            if (partnersId == null)
                throw new System.ArgumentNullException("partnersId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/partners/{partnersId}");
            urlBuilder_.Replace("{partnersId}", System.Uri.EscapeDataString(ConvertToString(partnersId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Partner>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates information about a location. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `location.name`. The unique identifier of the location. Read-only. Defined by the platform.</param>
        /// <param name="locationsId">Part of `location.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="location">Required. Location information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> UpdateLocationAsync(string brandsId, string locationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Location location)
        {
            return UpdateLocationAsync(brandsId, locationsId, updateMask, location, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates information about a location. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `location.name`. The unique identifier of the location. Read-only. Defined by the platform.</param>
        /// <param name="locationsId">Part of `location.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="location">Required. Location information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> UpdateLocationAsync(string brandsId, string locationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Location location, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(location, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Deletes a location. The delete request fails if any `brands.locations.requestVerification` requests have been made for the location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteLocationAsync(string brandsId, string locationsId)
        {
            return DeleteLocationAsync(brandsId, locationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes a location. The delete request fails if any `brands.locations.requestVerification` requests have been made for the location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteLocationAsync(string brandsId, string locationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleProtobufEmpty>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get information about a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> GetLocationAsync(string brandsId, string locationsId)
        {
            return GetLocationAsync(brandsId, locationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get information about a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Location> GetLocationAsync(string brandsId, string locationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Location>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Deletes a brand. If the brand has any associated agents or locations, the delete request fails unless `force` is `true`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="force">If true, any agents and locations associated with this brand are also deleted.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteBrandAsync(string brandsId, bool? force)
        {
            return DeleteBrandAsync(brandsId, force, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes a brand. If the brand has any associated agents or locations, the delete request fails unless `force` is `true`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <param name="force">If true, any agents and locations associated with this brand are also deleted.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteBrandAsync(string brandsId, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleProtobufEmpty>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets information about a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> GetBrandAsync(string brandsId)
        {
            return GetBrandAsync(brandsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets information about a brand.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the brand. If the brand identifier is "1234", this parameter resolves to "brands/1234".</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> GetBrandAsync(string brandsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Brand>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates information about a brand. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `brand.name`. Output only. The unique identifier of the brand. Defined by the platform.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="brand">Required. Brand information to be updated.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> UpdateBrandAsync(string brandsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Brand brand)
        {
            return UpdateBrandAsync(brandsId, updateMask, brand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates information about a brand. *Caution*: If you update a field that takes a list as input, you must include the entire list in the update request. Updates to list fields replace the entire list.
        /// </remarks>
        /// <param name="brandsId">Part of `brand.name`. Output only. The unique identifier of the brand. Defined by the platform.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="brand">Required. Brand information to be updated.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Brand> UpdateBrandAsync(string brandsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Brand brand, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(brand, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Brand>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the integration. If the brand identifier is "1234", the agent identifier is "5678", and the integration identifier is "9092", this parameter resolves to "brands/1234/agents/5678/integrations/9092".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> GetIntegrationAsync(string brandsId, string agentsId, string integrationsId)
        {
            return GetIntegrationAsync(brandsId, agentsId, integrationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the integration. If the brand identifier is "1234", the agent identifier is "5678", and the integration identifier is "9092", this parameter resolves to "brands/1234/agents/5678/integrations/9092".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> GetIntegrationAsync(string brandsId, string agentsId, string integrationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            if (integrationsId == null)
                throw new System.ArgumentNullException("integrationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/integrations/{integrationsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{integrationsId}", System.Uri.EscapeDataString(ConvertToString(integrationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Integration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the integration. If the brand identifier is "1234", the agent identifier is "5678", and the integration identifier is "9092", this parameter resolves to "brands/1234/agents/5678/integrations/9092".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteIntegrationAsync(string brandsId, string agentsId, string integrationsId)
        {
            return DeleteIntegrationAsync(brandsId, agentsId, integrationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete an integration.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the integration. If the brand identifier is "1234", the agent identifier is "5678", and the integration identifier is "9092", this parameter resolves to "brands/1234/agents/5678/integrations/9092".</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleProtobufEmpty> DeleteIntegrationAsync(string brandsId, string agentsId, string integrationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            if (integrationsId == null)
                throw new System.ArgumentNullException("integrationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/integrations/{integrationsId}");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{integrationsId}", System.Uri.EscapeDataString(ConvertToString(integrationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleProtobufEmpty>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Update an integration. For adding a DialogflowDocument, only the "dialogflow_es_integration.dialogflow_knowledge_bases" flag should be specified. Adding a document should be an isolated update.
        /// </remarks>
        /// <param name="brandsId">Part of `integration.name`. Output only. The unique identifier of the integration. Read-only. Defined by the platform.</param>
        /// <param name="agentsId">Part of `integration.name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `integration.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">Required. The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="integration">Required. Integration information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> UpdateIntegrationAsync(string brandsId, string agentsId, string integrationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Integration integration)
        {
            return UpdateIntegrationAsync(brandsId, agentsId, integrationsId, updateMask, integration, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update an integration. For adding a DialogflowDocument, only the "dialogflow_es_integration.dialogflow_knowledge_bases" flag should be specified. Adding a document should be an isolated update.
        /// </remarks>
        /// <param name="brandsId">Part of `integration.name`. Output only. The unique identifier of the integration. Read-only. Defined by the platform.</param>
        /// <param name="agentsId">Part of `integration.name`. See documentation of `brandsId`.</param>
        /// <param name="integrationsId">Part of `integration.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">Required. The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="integration">Required. Integration information</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Integration> UpdateIntegrationAsync(string brandsId, string agentsId, string integrationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1Integration integration, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            if (integrationsId == null)
                throw new System.ArgumentNullException("integrationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/integrations/{integrationsId}?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{integrationsId}", System.Uri.EscapeDataString(ConvertToString(integrationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(integration, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Integration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the launch information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location launch.</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> GetLocationLaunchAsync(string brandsId, string locationsId)
        {
            return GetLocationLaunchAsync(brandsId, locationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the launch information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location launch.</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> GetLocationLaunchAsync(string brandsId, string locationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}/launch");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates the launch information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `locationLaunch.name`. Required. The identifier for launch.</param>
        /// <param name="locationsId">Part of `locationLaunch.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="locationLaunch">Required. The location launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> UpdateLocationLaunchAsync(string brandsId, string locationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1LocationLaunch locationLaunch)
        {
            return UpdateLocationLaunchAsync(brandsId, locationsId, updateMask, locationLaunch, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the launch information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `locationLaunch.name`. Required. The identifier for launch.</param>
        /// <param name="locationsId">Part of `locationLaunch.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="locationLaunch">Required. The location launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> UpdateLocationLaunchAsync(string brandsId, string locationsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1LocationLaunch locationLaunch, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}/launch?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(locationLaunch, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Begins the launch process for a location. A location is available to users after it launches. A location can only have one instance of launch at a time. If the location hasn't been launched previously, sets the launch status to `PENDING`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> RequestLocationLaunchAsync(string brandsId, string locationsId, GoogleCommunicationsBusinesscommunicationsV1RequestLocationLaunchRequest body)
        {
            return RequestLocationLaunchAsync(brandsId, locationsId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Begins the launch process for a location. A location is available to users after it launches. A location can only have one instance of launch at a time. If the location hasn't been launched previously, sets the launch status to `PENDING`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch> RequestLocationLaunchAsync(string brandsId, string locationsId, GoogleCommunicationsBusinesscommunicationsV1RequestLocationLaunchRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}:requestLaunch");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1LocationLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Begins verification for a location. A location is available for use after it's verified. A location can only have one instance of verification at a time. If the location status hasn't been verified previously, sets the status to `PENDING`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationVerification> RequestLocationVerificationAsync(string brandsId, string locationsId, GoogleCommunicationsBusinesscommunicationsV1RequestLocationVerificationRequest body)
        {
            return RequestLocationVerificationAsync(brandsId, locationsId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Begins verification for a location. A location is available for use after it's verified. A location can only have one instance of verification at a time. If the location status hasn't been verified previously, sets the status to `PENDING`.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location. If the brand identifier is "1234" and the location identifier is "5678", this parameter resolves to "brands/1234/locations/5678".</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <param name="body">The request body.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationVerification> RequestLocationVerificationAsync(string brandsId, string locationsId, GoogleCommunicationsBusinesscommunicationsV1RequestLocationVerificationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}:requestVerification");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1LocationVerification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new greeting for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent associated with the greeting. If the brand ID is "1234" and the agent ID is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="greeting">Required. Greeting information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> CreateGreetingAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1Greeting greeting)
        {
            return CreateGreetingAsync(brandsId, agentsId, greeting, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new greeting for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent associated with the greeting. If the brand ID is "1234" and the agent ID is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="greeting">Required. Greeting information.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1Greeting> CreateGreetingAsync(string brandsId, string agentsId, GoogleCommunicationsBusinesscommunicationsV1Greeting greeting, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/greetings");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(greeting, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1Greeting>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Lists all greetings associated with an agent. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand ID is "1234" and agent ID is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="pageSize">Specify the maximum number of results for the server to return. The server may limit the number of results returned per page. If the page_size is 0, the server will decide how many results to return.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListGreetingsResponse> ListGreetingsAsync(string brandsId, string agentsId, int? pageSize, string pageToken)
        {
            return ListGreetingsAsync(brandsId, agentsId, pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Lists all greetings associated with an agent. *Note*: This method always sets `pageSize` to `0`.
        /// </remarks>
        /// <param name="brandsId">Part of `parent`. Required. The unique identifier of the agent. If the brand ID is "1234" and agent ID is "5678", this parameter resolves to "brands/1234/agents/5678".</param>
        /// <param name="agentsId">Part of `parent`. See documentation of `brandsId`.</param>
        /// <param name="pageSize">Specify the maximum number of results for the server to return. The server may limit the number of results returned per page. If the page_size is 0, the server will decide how many results to return.</param>
        /// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1ListGreetingsResponse> ListGreetingsAsync(string brandsId, string agentsId, int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/greetings?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageToken != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageToken") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1ListGreetingsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the verification information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location verification.</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationVerification> GetLocationVerificationAsync(string brandsId, string locationsId)
        {
            return GetLocationVerificationAsync(brandsId, locationsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the verification information for a location.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the location verification.</param>
        /// <param name="locationsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1LocationVerification> GetLocationVerificationAsync(string brandsId, string locationsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (locationsId == null)
                throw new System.ArgumentNullException("locationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/locations/{locationsId}/verification");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{locationsId}", System.Uri.EscapeDataString(ConvertToString(locationsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1LocationVerification>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates the launch information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `agentLaunch.name`. Required. The identifier for launch.</param>
        /// <param name="agentsId">Part of `agentLaunch.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agentLaunch">Required. The agent launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> UpdateAgentLaunchAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1AgentLaunch agentLaunch)
        {
            return UpdateAgentLaunchAsync(brandsId, agentsId, updateMask, agentLaunch, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the launch information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `agentLaunch.name`. Required. The identifier for launch.</param>
        /// <param name="agentsId">Part of `agentLaunch.name`. See documentation of `brandsId`.</param>
        /// <param name="updateMask">The update mask applies to the resource. For the FieldMask definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask</param>
        /// <param name="agentLaunch">Required. The agent launch to update.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> UpdateAgentLaunchAsync(string brandsId, string agentsId, string updateMask, GoogleCommunicationsBusinesscommunicationsV1AgentLaunch agentLaunch, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/launch?");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (updateMask != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updateMask") + "=").Append(System.Uri.EscapeDataString(ConvertToString(updateMask, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(agentLaunch, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Gets the launch information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent launch.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> GetAgentLaunchAsync(string brandsId, string agentsId)
        {
            return GetAgentLaunchAsync(brandsId, agentsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Gets the launch information for an agent.
        /// </remarks>
        /// <param name="brandsId">Part of `name`. Required. The unique identifier of the agent launch.</param>
        /// <param name="agentsId">Part of `name`. See documentation of `brandsId`.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch> GetAgentLaunchAsync(string brandsId, string agentsId, System.Threading.CancellationToken cancellationToken)
        {
            if (brandsId == null)
                throw new System.ArgumentNullException("brandsId");

            if (agentsId == null)
                throw new System.ArgumentNullException("agentsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/brands/{brandsId}/agents/{agentsId}/launch");
            urlBuilder_.Replace("{brandsId}", System.Uri.EscapeDataString(ConvertToString(brandsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{agentsId}", System.Uri.EscapeDataString(ConvertToString(agentsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoogleCommunicationsBusinesscommunicationsV1AgentLaunch>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// A list of all Google provided template questions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListSurveyQuestionsResponse
    {
        /// <summary>
        /// List of Google provided template survey question information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surveyQuestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1SurveyQuestion> SurveyQuestions { get; set; }

    }

    /// <summary>
    /// Response for ListIntegrations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListIntegrationsResponse
    {
        /// <summary>
        /// Currently this field is unsupported because the number of agent-level integrations is too few for pagination to be needed. The pagination token to retrieve the next page of results. If the value is "", it means no further results for the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// List of integrations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("integrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Integration> Integrations { get; set; }

    }

    /// <summary>
    /// Contact details displayed in addition to the messaging button.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentNonLocalConfigContactOption
    {
        /// <summary>
        /// Required. The list of contact options available for the specified URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Options> Options { get; set; }

        /// <summary>
        /// Required. The URL that contact options are available for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Opens the specified URL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1OpenUrlAction
    {
        /// <summary>
        /// URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// When tapped, sends the text reply back to the agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1SuggestedReply
    {
        /// <summary>
        /// The string that the agent receives when a user taps the suggested reply. Maximum 2,048 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Text that is shown in the suggested reply and sent to the agent when the user taps it. Maximum 25 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Message containing the content information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1ContentInfo
    {
        /// <summary>
        /// If set, the platform fetches the file and thumbnail from the specified URLs, even if the platform has cached copies of the file (and/or of the thumbnail).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceRefresh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceRefresh { get; set; }

        /// <summary>
        /// Optional. Publicly reachable URL of the thumbnail. If you don't provide a thumbnail URL, the platform displays a blank placeholder thumbnail until the user's device downloads the file. Maximum 25 KB. Supported content types: image/jpeg, image/jpg, image/png, image/webp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnailUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Publicly reachable URL of the file. The platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL. Maximum 5 MB. Supported content types: image/jpeg, image/jpg, image/png, image/webp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Text describing the details about the media for accessibility purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltText { get; set; }

    }

    /// <summary>
    /// Information about a Business Messages agent and Dialogflow CX project association.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1DialogflowCxIntegration
    {
        /// <summary>
        /// Required. If `ENABLED`, Business Messages automatically sends the Dialogflow responses to users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoResponseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1DialogflowCxIntegrationAutoResponseStatus? AutoResponseStatus { get; set; }

        /// <summary>
        /// Required. The Dialogflow project ID. Non-editable. To change this value, you must delete the Dialogflow project from this agent, then create a new integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowProjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowProjectId { get; set; }

        /// <summary>
        /// Output only. Information about the operating state of the Dialogflow integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1OperationInfo OperationInfo { get; set; }

        /// <summary>
        /// Output only. The service account that must be configured in the Dialogflow project with the "Dialogflow Console Agent Editor" and "Dialogflow API Client" roles. This is required to provide access to the Dialogflow API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowServiceAccountEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowServiceAccountEmail { get; set; }

        /// <summary>
        /// Required. The Dialogflow Agent ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowAgentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowAgentId { get; set; }

    }

    /// <summary>
    /// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleProtobufEmpty
    {

    }

    /// <summary>
    /// Knowledge base information. A knowledge base can have multiple FAQ URLs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1DialogflowKnowledgebase
    {
        /// <summary>
        /// Knowledge base documents. Optional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1DialogflowDocument> Documents { get; set; }

        /// <summary>
        /// Output only. Time at which the knowledge base was created or updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Output only. Knowledgebase ID. Unique identifier returned by Dialogflow service after creation of a knowledge base. If the brand identifier is "1234", the agent identifier is "5678", the integration identifier is "9092", and the knowledge base identifier is "1111", this parameter resolves to "brands/1234/agents/5678/integrations/9092/knowledgebases/1111".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Required. Knowledge base display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

    }

    /// <summary>
    /// A range of hours that messaging is available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHours
    {
        /// <summary>
        /// Required. End time for each day within the day-of-week range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleTypeTimeOfDay EndTime { get; set; }

        /// <summary>
        /// Required. The [IANA time zone](https://www.iana.org/time-zones) for the hours. For example, "America/Los_Angeles".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Required. Start day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHoursStartDay? StartDay { get; set; }

        /// <summary>
        /// Required. End day. Includes the specified day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHoursEndDay? EndDay { get; set; }

        /// <summary>
        /// Required. Start time for each day within the day-of-week range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleTypeTimeOfDay StartTime { get; set; }

    }

    /// <summary>
    /// Partner that is onboarded with a supported product.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Partner
    {
        /// <summary>
        /// The product capabilities of the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productCapabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1ProductCapability> ProductCapabilities { get; set; }

        /// <summary>
        /// Optional. The list of contact emails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactEmails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ContactEmails { get; set; }

        /// <summary>
        /// Required. The display name of the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Optional. The company name of the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        /// <summary>
        /// Immutable. The unique identifier of the partner. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Output only. Service account with access to the Dialogflow Client API role. This account is created by the platform and provides access to Dialogflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowServiceAccountEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowServiceAccountEmail { get; set; }

    }

    /// <summary>
    /// When tapped, sends a request for a live agent to join the conversation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1LiveAgentRequest
    {

    }

    /// <summary>
    /// Details for human representative.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1HumanRepresentative
    {
        /// <summary>
        /// Required. Human messaging availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("humanMessagingAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1MessagingAvailability HumanMessagingAvailability { get; set; }

    }

    /// <summary>
    /// The detailed content of each survey question.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SurveyQuestion
    {
        /// <summary>
        /// Required. The unique identifier of the question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Output only. Type of the question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1SurveyQuestionQuestionType? QuestionType { get; set; }

        /// <summary>
        /// Required. Question content. Limited to 200 characters for custom questions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuestionContent { get; set; }

        /// <summary>
        /// Required. List of responses displayed with the question. Maximum 12.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responseOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1SurveyResponse> ResponseOptions { get; set; }

    }

    /// <summary>
    /// A suggested reply.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Suggestion
    {
        /// <summary>
        /// A suggested action that initiates a native action on the device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1SuggestedAction Action { get; set; }

        /// <summary>
        /// Users can tap a suggested reply to send the text back to the agent as a reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1SuggestedReply Reply { get; set; }

    }

    /// <summary>
    /// The hours of each day of the week that messaging is available. You can group hours for multiple days together. For example, * 08:00–16:00 hrs PDT Monday–Wednesday * 10:00–14:00 hrs PDT Thursday–Friday * 15:00–18:00 hrs PDT Thursday–Friday * 10:00–14:00 hrs PDT Saturday–Saturday If there are gaps in availability, such as no specified availability on Sunday, messaging is unavailable during those gaps. Bot hours have no effect on availability. Bot-only agents always display a welcome message, while agents with both human and bot representative settings only consider human representatives when defining availability.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1MessagingAvailability
    {
        /// <summary>
        /// Required. Hours of messaging availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHours> Hours { get; set; }

    }

    /// <summary>
    /// Details about Business Messages agent launch for each entry point.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunch
    {
        /// <summary>
        /// Entry point for which launch information is provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunchEntryPoint? EntryPoint { get; set; }

        /// <summary>
        /// List of [CLDR region codes](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) for countries where the agent should launch `NON_LOCAL` entry points. Required for `NON_LOCAL` entry points. This must be a subset of the region codes specified in the agent's `nonLocalConfig`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RegionCodes { get; set; }

        /// <summary>
        /// The launch state for entry point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("launchState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunchLaunchState? LaunchState { get; set; }

    }

    /// <summary>
    /// Agent information specifically related to Verified Calls.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgent
    {
        /// <summary>
        /// Required. Publicly available URL of the agent logo to display with a verified call. Maximum 50 KB. Not modifiable after agent verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Required. Phone numbers that this agent may use when placing a verified call. Only add / remove actions are allowed. Each action will be reviewed before the change takes place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentVerifiedCallsPhone> Phones { get; set; }

        /// <summary>
        /// Required. Call reasons that this agent may use when placing a verified call. Only add / remove actions are allowed. Each action will be reviewed before the change takes place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("callReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentCallReason> CallReasons { get; set; }

    }

    /// <summary>
    /// Conversational setting for an agent or location. Each locale has its own conversational settings. Locale is represented by a well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ConversationalSetting
    {
        /// <summary>
        /// Optional. Details about the agent's conversation starters. Maximum 5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationStarters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1ConversationStarters> ConversationStarters { get; set; }

        /// <summary>
        /// Required. Details about the agent's privacy policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1PrivacyPolicy PrivacyPolicy { get; set; }

        /// <summary>
        /// Required. Details about the welcome message for an agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1WelcomeMessage WelcomeMessage { get; set; }

        /// <summary>
        /// Optional. Details about the offline message for an agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offlineMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1OfflineMessage OfflineMessage { get; set; }

    }

    /// <summary>
    /// Business Messages capabilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesCapability
    {
        /// <summary>
        /// Required. The webhook URL where the messages are delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebhookUrl { get; set; }

    }

    /// <summary>
    /// RBM Dev Console failure reason to be attached to RPC status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RcsVibraniumFailureReason
    {
        /// <summary>
        /// Used to provide Error status to client. This object is shared with external developer. b/250608301
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleRpcStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RcsVibraniumFailureReasonReason? Reason { get; set; }

    }

    /// <summary>
    /// A media file within a rich card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1Media
    {
        /// <summary>
        /// Information about a file, including the URL of the file and the URL of the file's thumbnail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1ContentInfo ContentInfo { get; set; }

        /// <summary>
        /// The height of the media within a rich card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinessmessagesV1MediaHeight? Height { get; set; }

    }

    /// <summary>
    /// Standalone card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1StandaloneCard
    {
        /// <summary>
        /// Card content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1CardContent CardContent { get; set; }

    }

    /// <summary>
    /// When tapped, initiates the corresponding native action on the device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SuggestedAction
    {
        /// <summary>
        /// The string that the agent receives when a user taps the suggested action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Text that is shown in the suggested action. Maximum 35 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Opens the specified URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openUrlAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1OpenUrlAction OpenUrlAction { get; set; }

    }

    /// <summary>
    /// A standalone rich card or a carousel of rich cards sent from the agent to the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1RichCard
    {
        /// <summary>
        /// Standalone card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standaloneCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1StandaloneCard StandaloneCard { get; set; }

        /// <summary>
        /// Carousel of cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carouselCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1CarouselCard CarouselCard { get; set; }

    }

    /// <summary>
    /// Details for bot representative.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BotRepresentative
    {
        /// <summary>
        /// Required. Bot messaging availability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("botMessagingAvailability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1MessagingAvailability BotMessagingAvailability { get; set; }

    }

    /// <summary>
    /// Interactions supported by an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SupportedAgentInteraction
    {
        /// <summary>
        /// Bot representative details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("botRepresentative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BotRepresentative BotRepresentative { get; set; }

        /// <summary>
        /// Required. The type of interaction supported by the agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1SupportedAgentInteractionInteractionType? InteractionType { get; set; }

        /// <summary>
        /// Human representative details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("humanRepresentative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1HumanRepresentative HumanRepresentative { get; set; }

    }

    /// <summary>
    /// Details about the verification information for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1AgentVerification
    {
        /// <summary>
        /// Required. The identifier for verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Required. The contact details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentVerificationContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1AgentVerificationContact AgentVerificationContact { get; set; }

        /// <summary>
        /// The verification state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verificationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1AgentVerificationVerificationState? VerificationState { get; set; }

    }

    /// <summary>
    /// Details about an agent launch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1AgentLaunch
    {
        /// <summary>
        /// Launch details for a Verified Calls agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifiedCalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsLaunch VerifiedCalls { get; set; }

        /// <summary>
        /// Required. The identifier for launch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Launch details for a Business Messages agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesLaunch BusinessMessages { get; set; }

    }

    /// <summary>
    /// Details about a location launch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1LocationLaunch
    {
        /// <summary>
        /// Required. The identifier for launch.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The launch state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("launchState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1LocationLaunchLaunchState? LaunchState { get; set; }

    }

    /// <summary>
    /// The entry point configuration for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointConfig
    {
        /// <summary>
        /// Required. The Google surfaces the agent is enabled to appear on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedEntryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointConfigAllowedEntryPoint? AllowedEntryPoint { get; set; }

    }

    /// <summary>
    /// Card content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1CardContent
    {
        /// <summary>
        /// Optional. List of suggestions to include in the card. Maximum 4 suggestions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinessmessagesV1Suggestion> Suggestions { get; set; }

        /// <summary>
        /// Optional. Description of the card. Maximum 2,000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional. Media to include in the card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1Media Media { get; set; }

        /// <summary>
        /// Optional. Title of the card. Maximum 200 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    /// <summary>
    /// Agent information specific to Business Messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgent
    {
        /// <summary>
        /// Optional. Additional agent interaction information. Enables the agent to support multiple interaction types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalAgentInteractions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1SupportedAgentInteraction> AdditionalAgentInteractions { get; set; }

        /// <summary>
        /// Optional. The phone number for the agent to display. If not specified, the agent displays the phone number for the brand found in the [Google Knowledge Graph](https://developers.google.com/knowledge-graph), if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1Phone Phone { get; set; }

        /// <summary>
        /// Required. Primary agent interaction information. Used when the user initiates a conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryAgentInteraction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1SupportedAgentInteraction PrimaryAgentInteraction { get; set; }

        /// <summary>
        /// Optional. Configuration to enable custom surveys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surveyConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1SurveyConfig SurveyConfig { get; set; }

        /// <summary>
        /// Optional. A partner-specified identifier for the agent. The identifier is passed alongside all messages sent to the agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customAgentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomAgentId { get; set; }

        /// <summary>
        /// Optional. List of entry point configurations. Not modifiable after agent verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryPointConfigs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointConfig> EntryPointConfigs { get; set; }

        /// <summary>
        /// Optional. Publicly available URL of the logo for the agent. Maximum 50 KB. Not modifiable after agent verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Output only. The URL for testing the agent's conversational experience. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentTestUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgentTestUrl { get; set; }

        /// <summary>
        /// Output only. URLs for testing the agent's conversational experience. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("testUrls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1TestUrl> TestUrls { get; set; }

        /// <summary>
        /// Optional. Configuration for non-local entry points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonLocalConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentNonLocalConfig NonLocalConfig { get; set; }

        /// <summary>
        /// Required. The default locale for the agent. Must match a locale defined in `conversationalSettings`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLocale { get; set; }

        /// <summary>
        /// Optional. Authorization configuration for OAuth support.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorizationConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentAuthorizationConfig AuthorizationConfig { get; set; }

        /// <summary>
        /// Required. Conversational settings for an agent, mapped to a locale. Locale is represented by a well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationalSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GoogleCommunicationsBusinesscommunicationsV1ConversationalSetting> ConversationalSettings { get; set; }

    }

    /// <summary>
    /// Opens the user's default dialer app with the specified phone number filled in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1DialAction
    {
        /// <summary>
        /// Required. The specified phone number, in [RFC 3966](https://tools.ietf.org/html/rfc3966) format. For example, "+1-201-555-0123".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

    }

    /// <summary>
    /// Call reason with approval information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentCallReason
    {
        /// <summary>
        /// Immutable. The actual text of the call reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Output only. Approval details; each call reason must be approved before use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentApprovalDetails ApprovalDetails { get; set; }

    }

    /// <summary>
    /// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleTypeTimeOfDay
    {
        /// <summary>
        /// Minutes of hour of day. Must be from 0 to 59.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }

        /// <summary>
        /// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }

        /// <summary>
        /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nanos { get; set; }

        /// <summary>
        /// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seconds { get; set; }

    }

    /// <summary>
    /// Phone number with approval information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentVerifiedCallsPhone
    {
        /// <summary>
        /// Immutable. Phone number in E.164 format i.e. +18888888888
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

        /// <summary>
        /// Output only. Approval details, each phone number must be approved before use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentApprovalDetails ApprovalDetails { get; set; }

    }

    /// <summary>
    /// A knowledge base document. A document can be either a website URL or a URL to a CSV file. URLs must be publicly available. CSV files must contain one or more question/answer pairs, with one row for each pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1DialogflowDocument
    {
        /// <summary>
        /// Output only. Time at which the document was created/updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateTime { get; set; }

        /// <summary>
        /// Output only. Operation Information is populated only when a document is added to an existing knowledge base.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1OperationInfo OperationInfo { get; set; }

        /// <summary>
        /// Required. Display name of a FAQ document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// System-generated Document ID. If the brand identifier is "1234", the agent identifier is "5678", the integration identifier is "9092", the knowledge base identifier is "1111", and the document identifier is "2222", this parameter resolves to "brands/1234/agents/5678/integrations/9092/knowledgebases/1111/documents/2222".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The raw content of the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rawContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] RawContent { get; set; }

        /// <summary>
        /// URL of a FAQ document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faqUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaqUrl { get; set; }

    }

    /// <summary>
    /// The product capabilities that the partner supports.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ProductCapability
    {
        /// <summary>
        /// Verified SMS capability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifiedSmsCapability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsCapability VerifiedSmsCapability { get; set; }

        /// <summary>
        /// The product supported by the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1ProductCapabilityProduct? Product { get; set; }

        /// <summary>
        /// Business Messages capability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessMessagesCapability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesCapability BusinessMessagesCapability { get; set; }

    }

    /// <summary>
    /// Request to begin business information verification for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1RequestAgentVerificationRequest
    {
        /// <summary>
        /// Required. Verification contact details for the agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentVerificationContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1AgentVerificationContact AgentVerificationContact { get; set; }

    }

    /// <summary>
    /// A list of agents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListAgentsResponse
    {
        /// <summary>
        /// The pagination token to retrieve the next page of results. If the value is "", it means no further results for the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// List of agent information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Agent> Agents { get; set; }

    }

    /// <summary>
    /// Details about a greeting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Greeting
    {
        /// <summary>
        /// Optional. Details about the conversation starters. Maximum 5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationStarters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1ConversationStarters> ConversationStarters { get; set; }

        /// <summary>
        /// Required. The locale is a well-formed IETF BCP 47 language tag. It must match a locale defined in ConversationalSettings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// Required. Welcome message content. A greeting must have at least one welcome message defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("welcomeMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1WelcomeMessage> WelcomeMessages { get; set; }

        /// <summary>
        /// Output only. The ad link corresponding to this greeting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdLink { get; set; }

        /// <summary>
        /// Optional. A custom identifier defined by the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomId { get; set; }

        /// <summary>
        /// Output only. The name of the greeting, as set by Business Messages. Resolves to "brands/{brand_id}/agents/{agent_id}/greetings/{greeting_id}" where {greeting_id} is the unique ID of the greeting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Information about a Business Messages agent and Dialogflow ES project association.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1DialogflowEsIntegration
    {
        /// <summary>
        /// Output only. The service account that must be configured in the Dialogflow project with the "Dialogflow Console Agent Editor" and "Dialogflow API Client" roles. This is required to provide access to the Dialogflow API.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowServiceAccountEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowServiceAccountEmail { get; set; }

        /// <summary>
        /// Knowledge bases associated with the Dialogflow project. Optional
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowKnowledgeBases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1DialogflowKnowledgebase> DialogflowKnowledgeBases { get; set; }

        /// <summary>
        /// Required. If `ENABLED`, Business Messages automatically sends the Dialogflow responses to users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoResponseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1DialogflowEsIntegrationAutoResponseStatus? AutoResponseStatus { get; set; }

        /// <summary>
        /// Required. The Dialogflow project ID. Non-editable. To change this value, you must delete the Dialogflow project from this agent, then create a new integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowProjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DialogflowProjectId { get; set; }

        /// <summary>
        /// Output only. Information about the operating state of the Dialogflow integration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1OperationInfo OperationInfo { get; set; }

    }

    /// <summary>
    /// Request to begin business information verification for a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1RequestLocationVerificationRequest
    {

    }

    /// <summary>
    /// An image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1Image
    {
        /// <summary>
        /// Information about an image, including the URL of the image and the URL of the image's thumbnail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1ContentInfo ContentInfo { get; set; }

    }

    /// <summary>
    /// The greeting shown to users when they enter a conversation with the agent for the first time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1WelcomeMessage
    {
        /// <summary>
        /// Rich card message. Could be either standalone card or carousel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("richCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1RichCard RichCard { get; set; }

        /// <summary>
        /// Image message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1Image Image { get; set; }

        /// <summary>
        /// Text message. Maximum length 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Rich text message in valid markdown formatting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("richText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RichText { get; set; }

    }

    /// <summary>
    /// The greeting shown to users when they enter a conversation with the agent outside the chat hours.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1OfflineMessage
    {
        /// <summary>
        /// The text of the offline message. Maximum length 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// The Dialogflow operation information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1OperationInfo
    {
        /// <summary>
        /// Output only. Dialogflow Operation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1OperationInfoOperationType? OperationType { get; set; }

        /// <summary>
        /// Output only. The server-assigned name (operation Id), which is only unique within the same service that originally returns it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }

        /// <summary>
        /// Output only. Error result, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleRpcStatus Error { get; set; }

        /// <summary>
        /// Output only. Dialogflow Operation state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1OperationInfoOperationState? OperationState { get; set; }

    }

    /// <summary>
    /// A brand (business, organization, or group) that is represented by an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Brand
    {
        /// <summary>
        /// Output only. The unique identifier of the brand. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Required. The display name of the brand. Maximum 100 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

    }

    /// <summary>
    /// Request to launch an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1RequestAgentLaunchRequest
    {
        /// <summary>
        /// Required. The agent launch to create. Name and Launch status are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agentLaunch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1AgentLaunch AgentLaunch { get; set; }

    }

    /// <summary>
    /// Information about a physical location of a brand.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Location
    {
        /// <summary>
        /// Output only. The URL for testing the location's conversational experience. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationTestUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocationTestUrl { get; set; }

        /// <summary>
        /// Output only. Identifies the Google My Business Listing this Location is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListingId { get; set; }

        /// <summary>
        /// Output only. URLs for testing the location's conversational experience. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("testUrls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1TestUrl> TestUrls { get; set; }

        /// <summary>
        /// List of entry point configurations for locations. Not modifiable after being available to users through an agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locationEntryPointConfigs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1LocationEntryPointConfig> LocationEntryPointConfigs { get; set; }

        /// <summary>
        /// Optional. Conversational settings for an location, mapped to a locale. Locale is represented by a well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conversationalSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GoogleCommunicationsBusinesscommunicationsV1ConversationalSetting> ConversationalSettings { get; set; }

        /// <summary>
        /// Required. The default locale for the location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLocale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLocale { get; set; }

        /// <summary>
        /// Required. The name of the agent associated with the location. If the brand identifier is "1234" and the agent identifier is "5678", this field resolves to "brands/1234/agents/5678".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Agent { get; set; }

        /// <summary>
        /// The unique identifier of the location. Read-only. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Required. The [Place ID](https://developers.google.com/places/place-id), or unique identifier used in Google Maps, for the location. Not modifiable after being available to users through an agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("placeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlaceId { get; set; }

    }

    /// <summary>
    /// Details for authentication via OAuth.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1AuthenticationRequestOauth
    {
        /// <summary>
        /// Optional. The [code challenge method](https://www.oauth.com/oauth2-servers/pkce/authorization-request/) used to generate the code challenge. If this parameter is omitted, the server assumes `plain`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChallengeMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeChallengeMethod { get; set; }

        /// <summary>
        /// Required. An array that specifies the [scopes](https://oauth.net/2/scope/) of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Scopes { get; set; }

        /// <summary>
        /// Required. The [ID](https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/) of the application that asks for authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        /// <summary>
        /// Required. The [code challenge](https://tools.ietf.org/html/rfc7636#section-4.2) used to exchange access tokens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeChallenge { get; set; }

    }

    /// <summary>
    /// Sender IDs and the countries they operate in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsAgentSender
    {
        /// <summary>
        /// A country the sender ID operates in as an [ISO 3166 Alpha-2 country code](https://www.iso.org/obp/ui/#search/code/). For example, "US" for the United States of America.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// A sender ID—a long code (E.164 format), short code, national code, or alphanumeric code—associated with the agent that can send SMS messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenderId { get; set; }

    }

    /// <summary>
    /// Configuration to enable non-local entry points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentNonLocalConfig
    {
        /// <summary>
        /// Required. List of phone numbers for call deflection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("callDeflectionPhoneNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Phone> CallDeflectionPhoneNumbers { get; set; }

        /// <summary>
        /// Required. Domains to enable for the sitelinks entry point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabledDomains", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EnabledDomains { get; set; }

        /// <summary>
        /// Required. Contact information for the agent that displays with the messaging button.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentNonLocalConfigContactOption ContactOption { get; set; }

        /// <summary>
        /// Required. List of [CLDR region codes](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) for countries where the agent is allowed to launch `NON_LOCAL` entry points. Required for `NON_LOCAL` entry points.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RegionCodes { get; set; }

        /// <summary>
        /// Required. Agent's phone number. Overrides the `phone` field for conversations started from non-local entry points. This phone number will be used for all configured regions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1Phone PhoneNumber { get; set; }

    }

    /// <summary>
    /// Verified SMS capabilities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsCapability
    {
        /// <summary>
        /// Required. The webhook URL where the Verified SMS callbacks are delivered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebhookUrl { get; set; }

    }

    /// <summary>
    /// Approval details composed from the state and optional additional information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentApprovalDetails
    {
        /// <summary>
        /// Output only. The current approval state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentApprovalDetailsApprovalState? ApprovalState { get; set; }

        /// <summary>
        /// Output only. Additional information about the decision, if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalInfo { get; set; }

    }

    /// <summary>
    /// A list of locations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListLocationsResponse
    {
        /// <summary>
        /// The pagination token to retrieve the next page of results. If the value is "", it means no further results for the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        /// <summary>
        /// List of locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Location> Locations { get; set; }

    }

    /// <summary>
    /// The content for a survey question response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SurveyResponse
    {
        /// <summary>
        /// The string the agent receives when the user taps the question response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Required. Text that is shown in the survey and sent back to the agent when the user taps it. Maximum 35 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

    }

    /// <summary>
    /// Request to launch a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1RequestLocationLaunchRequest
    {

    }

    /// <summary>
    /// Information about the integration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Integration
    {
        /// <summary>
        /// Output only. Integration status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1IntegrationStatus? Status { get; set; }

        /// <summary>
        /// Information about an associated Dialogflow ES project. https://cloud.google.com/dialogflow/es/docs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowEsIntegration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1DialogflowEsIntegration DialogflowEsIntegration { get; set; }

        /// <summary>
        /// Output only. The unique identifier of the integration. Read-only. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Information about an associated Dialogflow CX project. https://cloud.google.com/dialogflow/cx/docs/basics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialogflowCxIntegration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1DialogflowCxIntegration DialogflowCxIntegration { get; set; }

    }

    /// <summary>
    /// A list of brands.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListBrandsResponse
    {
        /// <summary>
        /// List of brand information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Brand> Brands { get; set; }

        /// <summary>
        /// The pagination token to retrieve the next page of results. If the value is "", it means no further results for the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

    }

    /// <summary>
    /// Privacy policy details for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1PrivacyPolicy
    {
        /// <summary>
        /// Required. The URL for the privacy policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// When tapped, initiates the corresponding native action on the device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1SuggestedAction
    {
        /// <summary>
        /// Text that is shown in the suggested action. Maximum 25 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The string that the agent receives when a user taps the suggested action. Maximum 2,048 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Opens the user's default dialer app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1DialAction DialAction { get; set; }

        /// <summary>
        /// Opens the specified URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openUrlAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1OpenUrlAction OpenUrlAction { get; set; }

    }

    /// <summary>
    /// Verification contact details for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1AgentVerificationContact
    {
        /// <summary>
        /// Required. The email address of the partner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerEmailAddress { get; set; }

        /// <summary>
        /// Required. The public website of the brand to verify the domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandWebsiteUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandWebsiteUrl { get; set; }

        /// <summary>
        /// Required. The name of the partner requesting the verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerName { get; set; }

        /// <summary>
        /// Required. Name of a brand representative who can verify the accuracy of the launch details and that the partner represents the brand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandContactName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandContactName { get; set; }

        /// <summary>
        /// Required. The email address of the brand representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandContactEmailAddress { get; set; }

    }

    /// <summary>
    /// The entry point configuration for a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1LocationEntryPointConfig
    {
        /// <summary>
        /// Required. The Google surfaces the location is enabled to appear on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedEntryPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1LocationEntryPointConfigAllowedEntryPoint? AllowedEntryPoint { get; set; }

    }

    /// <summary>
    /// Custom survey configuration for an agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1CustomSurveyConfig
    {
        /// <summary>
        /// List of custom questions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customQuestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1SurveyQuestion> CustomQuestions { get; set; }

    }

    /// <summary>
    /// A conversational entity that represents a brand.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Agent
    {
        /// <summary>
        /// Required. The name that the agent displays to users. Maximum 100 characters. Not modifiable after agent verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Detailed agent information for Verified Calls.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifiedCallsAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgent VerifiedCallsAgent { get; set; }

        /// <summary>
        /// The unique identifier of the agent. Read-only. Defined by the platform.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Detailed agent information for Verified SMS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifiedSmsAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsAgent VerifiedSmsAgent { get; set; }

        /// <summary>
        /// Detailed agent information for Business Messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessMessagesAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgent BusinessMessagesAgent { get; set; }

    }

    /// <summary>
    /// When tapped, sends the text reply back to the agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SuggestedReply
    {
        /// <summary>
        /// Optional. The string the agent receives when the user taps the suggested reply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Required. Text that is shown in the suggested reply and sent back to the agent when the user taps it. Maximum 35 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// Agent information specific to Verified SMS.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsAgent
    {
        /// <summary>
        /// The list of Sender IDs for the Verified SMS agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("senders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1VerifiedSmsAgentSender> Senders { get; set; }

        /// <summary>
        /// Required. The agent logo. Maximum 50 KB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logoUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Required. Description about the registered agent. The description is visible to end users. Maximum 100 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Request to authenticate a conversation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1AuthenticationRequest
    {
        /// <summary>
        /// Details for authentication via OAuth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oauth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1AuthenticationRequestOauth Oauth { get; set; }

    }

    /// <summary>
    /// Opens the specified URL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1OpenUrlAction
    {
        /// <summary>
        /// URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Configuration details for supporting OAuth on Business Messages.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesAgentAuthorizationConfig
    {
        /// <summary>
        /// The endpoint URL where the user logs in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endpointUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointUrl { get; set; }

    }

    /// <summary>
    /// Details about Verified Calls agent launch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsLaunch
    {
        /// <summary>
        /// The launch state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("launchState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsLaunchLaunchState? LaunchState { get; set; }

    }

    /// <summary>
    /// Carousel of cards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1CarouselCard
    {
        /// <summary>
        /// The width of the cards in the carousel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinessmessagesV1CarouselCardCardWidth? CardWidth { get; set; }

        /// <summary>
        /// The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardContents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinessmessagesV1CardContent> CardContents { get; set; }

    }

    /// <summary>
    /// Test intent for supported conversational surfaces.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1TestUrl
    {
        /// <summary>
        /// The test url for launching conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The surface for the conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surface", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1TestUrlSurface? Surface { get; set; }

    }

    /// <summary>
    /// A suggestion within a chip list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinessmessagesV1Suggestion
    {
        /// <summary>
        /// A request to start authentication flow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1AuthenticationRequest AuthenticationRequest { get; set; }

        /// <summary>
        /// A suggested action that initiates a native action on the device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1SuggestedAction Action { get; set; }

        /// <summary>
        /// A request to have a live agent join the conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liveAgentRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1LiveAgentRequest LiveAgentRequest { get; set; }

        /// <summary>
        /// A suggestion for the user to reply with specified text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinessmessagesV1SuggestedReply Reply { get; set; }

    }

    /// <summary>
    /// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleRpcStatus
    {
        /// <summary>
        /// The status code, which should be an enum value of google.rpc.Code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>
        /// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// A list of messages that carry the error details. There is a common set of message types for APIs to use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> Details { get; set; }

    }

    /// <summary>
    /// Phone number.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1Phone
    {
        /// <summary>
        /// Required. Phone number in E.164 format. For example, "+12223334444".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }

    }

    /// <summary>
    /// The list of greetings associated with the agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ListGreetingsResponse
    {
        /// <summary>
        /// The list of greetings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("greetings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GoogleCommunicationsBusinesscommunicationsV1Greeting> Greetings { get; set; }

        /// <summary>
        /// The pagination token to retrieve the next page of results. If the value is "", there are no more results for the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

    }

    /// <summary>
    /// Details about the verification information for a location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1LocationVerification
    {
        /// <summary>
        /// Required. The identifier for verification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The verification state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verificationState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GoogleCommunicationsBusinesscommunicationsV1LocationVerificationVerificationState? VerificationState { get; set; }

    }

    /// <summary>
    /// Configuration details for supporting customized survey questions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1SurveyConfig
    {
        /// <summary>
        /// List of template question IDs for template questions included in a survey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateQuestionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TemplateQuestionIds { get; set; }

        /// <summary>
        /// Custom survey questions for an agent, mapped to a locale. Locale is represented by a well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customSurveys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GoogleCommunicationsBusinesscommunicationsV1CustomSurveyConfig> CustomSurveys { get; set; }

    }

    /// <summary>
    /// Details about a Business Messages agent launch.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesLaunch
    {
        /// <summary>
        /// Required. Launch details for each supported entry point. Key represented by BusinessMessagesEntryPointConfig.EntryPoint
        /// </summary>
        [Newtonsoft.Json.JsonProperty("launchDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunch> LaunchDetails { get; set; }

    }

    /// <summary>
    /// Suggested replies shown to users when they enter a conversation with the agent for the first time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoogleCommunicationsBusinesscommunicationsV1ConversationStarters
    {
        /// <summary>
        /// Optional. Suggestion at the beginning of a conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GoogleCommunicationsBusinesscommunicationsV1Suggestion Suggestion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPTION_UNSPECIFIED")]
        OPTION_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WEB_CHAT")]
        WEB_CHAT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHONE")]
        PHONE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL")]
        EMAIL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAQS")]
        FAQS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TWITTER")]
        TWITTER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WHATSAPP")]
        WHATSAPP = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1DialogflowCxIntegrationAutoResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_RESPONSE_STATUS_UNSPECIFIED")]
        AUTO_RESPONSE_STATUS_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHoursStartDay
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DAY_OF_WEEK_UNSPECIFIED")]
        DAY_OF_WEEK_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONDAY")]
        MONDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TUESDAY")]
        TUESDAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WEDNESDAY")]
        WEDNESDAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THURSDAY")]
        THURSDAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIDAY")]
        FRIDAY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY")]
        SATURDAY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SUNDAY")]
        SUNDAY = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1MessagingAvailabilityHoursEndDay
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DAY_OF_WEEK_UNSPECIFIED")]
        DAY_OF_WEEK_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MONDAY")]
        MONDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TUESDAY")]
        TUESDAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WEDNESDAY")]
        WEDNESDAY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"THURSDAY")]
        THURSDAY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FRIDAY")]
        FRIDAY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SATURDAY")]
        SATURDAY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SUNDAY")]
        SUNDAY = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1SurveyQuestionQuestionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TYPE_UNSPECIFIED")]
        TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE_STANDARD_QUESTION")]
        GOOGLE_STANDARD_QUESTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GOOGLE_TEMPLATE_QUESTION")]
        GOOGLE_TEMPLATE_QUESTION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTNER_CUSTOM_QUESTION")]
        PARTNER_CUSTOM_QUESTION = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunchEntryPoint
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENTRY_POINT_UNSPECIFIED")]
        ENTRY_POINT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_LOCAL")]
        NON_LOCAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointLaunchLaunchState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNSPECIFIED")]
        LAUNCH_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNLAUNCHED")]
        LAUNCH_STATE_UNLAUNCHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING")]
        LAUNCH_STATE_PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_LAUNCHED")]
        LAUNCH_STATE_LAUNCHED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_REJECTED")]
        LAUNCH_STATE_REJECTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_SUSPENDED")]
        LAUNCH_STATE_SUSPENDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING_UNLAUNCH")]
        LAUNCH_STATE_PENDING_UNLAUNCH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_INVALID_IN_GMB")]
        LAUNCH_STATE_INVALID_IN_GMB = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RcsVibraniumFailureReasonReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CREDENTIAL_MINTER_NOT_GENERATED")]
        CREDENTIAL_MINTER_NOT_GENERATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_IS_NOT_RBM_ENABLED")]
        DEVICE_IS_NOT_RBM_ENABLED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PHONE_NUMBER")]
        INVALID_PHONE_NUMBER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PROJECT_ID")]
        INVALID_PROJECT_ID = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_LAUNCHED_BY_ANOTHER_AGENT")]
        LOCATION_LAUNCHED_BY_ANOTHER_AGENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_PHONE_NUMBER")]
        DUPLICATE_PHONE_NUMBER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PHONE_NUMBER_ALREADY_EXISTS")]
        PHONE_NUMBER_ALREADY_EXISTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_CALL_REASON")]
        DUPLICATE_CALL_REASON = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DOMAIN_ALREADY_EXISTS")]
        DOMAIN_ALREADY_EXISTS = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MID_ALREADY_EXISTS")]
        MID_ALREADY_EXISTS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_USER")]
        INVALID_USER = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MID_NOT_FOUND")]
        MID_NOT_FOUND = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION_UNVERIFIED_IN_GMB")]
        LOCATION_UNVERIFIED_IN_GMB = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_USER")]
        DUPLICATE_USER = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_ROLE_ACCESS")]
        INSUFFICIENT_ROLE_ACCESS = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_PERMISSIONS_TO_MINT_EUC")]
        INSUFFICIENT_PERMISSIONS_TO_MINT_EUC = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"DIALOGFLOW_PROJECT_NOT_FOUND")]
        DIALOGFLOW_PROJECT_NOT_FOUND = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"DIALOGFLOW_INTERNAL_ERROR")]
        DIALOGFLOW_INTERNAL_ERROR = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"DIALOGFLOW_ES_PROJECT_NOT_FOUND_IN_GLOBAL_REGION")]
        DIALOGFLOW_ES_PROJECT_NOT_FOUND_IN_GLOBAL_REGION = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"DIALOGFLOW_CX_PROJECT_NOT_FOUND_IN_GLOBAL_REGION")]
        DIALOGFLOW_CX_PROJECT_NOT_FOUND_IN_GLOBAL_REGION = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_MARKDOWN_FORMAT")]
        INVALID_MARKDOWN_FORMAT = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"EXISTING_OWNER")]
        EXISTING_OWNER = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"LINKED_LOCATIONS")]
        LINKED_LOCATIONS = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"LINKED_MERCHANT_CENTER_ACCOUNTS")]
        LINKED_MERCHANT_CENTER_ACCOUNTS = 24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinessmessagesV1MediaHeight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HEIGHT_UNSPECIFIED")]
        HEIGHT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORT")]
        SHORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TALL")]
        TALL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1SupportedAgentInteractionInteractionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INTERACTION_TYPE_UNSPECIFIED")]
        INTERACTION_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BOT")]
        BOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HUMAN")]
        HUMAN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1AgentVerificationVerificationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_UNSPECIFIED")]
        VERIFICATION_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_UNVERIFIED")]
        VERIFICATION_STATE_UNVERIFIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_PENDING")]
        VERIFICATION_STATE_PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_VERIFIED")]
        VERIFICATION_STATE_VERIFIED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_SUSPENDED_IN_GMB")]
        VERIFICATION_STATE_SUSPENDED_IN_GMB = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1LocationLaunchLaunchState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNSPECIFIED")]
        LAUNCH_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNLAUNCHED")]
        LAUNCH_STATE_UNLAUNCHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING")]
        LAUNCH_STATE_PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_LAUNCHED")]
        LAUNCH_STATE_LAUNCHED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_REJECTED")]
        LAUNCH_STATE_REJECTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_SUSPENDED")]
        LAUNCH_STATE_SUSPENDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING_UNLAUNCH")]
        LAUNCH_STATE_PENDING_UNLAUNCH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_INVALID_IN_GMB")]
        LAUNCH_STATE_INVALID_IN_GMB = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1BusinessMessagesEntryPointConfigAllowedEntryPoint
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENTRY_POINT_UNSPECIFIED")]
        ENTRY_POINT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_LOCAL")]
        NON_LOCAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1ProductCapabilityProduct
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_UNSPECIFIED")]
        PRODUCT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_MESSAGES")]
        BUSINESS_MESSAGES = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED_SMS")]
        VERIFIED_SMS = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1DialogflowEsIntegrationAutoResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO_RESPONSE_STATUS_UNSPECIFIED")]
        AUTO_RESPONSE_STATUS_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1OperationInfoOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATION_TYPE_UNSPECIFIED")]
        OPERATION_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ASSOCIATE_DIALOGFLOW")]
        ASSOCIATE_DIALOGFLOW = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DISSOCIATE_DIALOGFLOW")]
        DISSOCIATE_DIALOGFLOW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADD_DOCUMENT_TO_KNOWLEDGEBASE")]
        ADD_DOCUMENT_TO_KNOWLEDGEBASE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DELETE_DOCUMENT_FROM_KNOWLEDGEBASE")]
        DELETE_DOCUMENT_FROM_KNOWLEDGEBASE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1OperationInfoOperationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OPERATION_STATE_UNSPECIFIED")]
        OPERATION_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsAgentApprovalDetailsApprovalState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STATE_UNSPECIFIED")]
        STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_APPROVAL")]
        PENDING_APPROVAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DENIED")]
        DENIED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_REMOVAL")]
        PENDING_REMOVAL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1IntegrationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INTEGRATION_STATUS_UNSPECIFIED")]
        INTEGRATION_STATUS_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1LocationEntryPointConfigAllowedEntryPoint
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENTRY_POINT_UNSPECIFIED")]
        ENTRY_POINT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACESHEET")]
        PLACESHEET = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MAPS_TACTILE")]
        MAPS_TACTILE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1VerifiedCallsLaunchLaunchState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNSPECIFIED")]
        LAUNCH_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_UNLAUNCHED")]
        LAUNCH_STATE_UNLAUNCHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING")]
        LAUNCH_STATE_PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_LAUNCHED")]
        LAUNCH_STATE_LAUNCHED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_REJECTED")]
        LAUNCH_STATE_REJECTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_SUSPENDED")]
        LAUNCH_STATE_SUSPENDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_PENDING_UNLAUNCH")]
        LAUNCH_STATE_PENDING_UNLAUNCH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LAUNCH_STATE_INVALID_IN_GMB")]
        LAUNCH_STATE_INVALID_IN_GMB = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinessmessagesV1CarouselCardCardWidth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_WIDTH_UNSPECIFIED")]
        CARD_WIDTH_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL")]
        SMALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1TestUrlSurface
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SURFACE_UNSPECIFIED")]
        SURFACE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SURFACE_ANDROID_WEB")]
        SURFACE_ANDROID_WEB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SURFACE_ANDROID_MAPS")]
        SURFACE_ANDROID_MAPS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SURFACE_IOS_MAPS")]
        SURFACE_IOS_MAPS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GoogleCommunicationsBusinesscommunicationsV1LocationVerificationVerificationState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_UNSPECIFIED")]
        VERIFICATION_STATE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_UNVERIFIED")]
        VERIFICATION_STATE_UNVERIFIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_PENDING")]
        VERIFICATION_STATE_PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_VERIFIED")]
        VERIFICATION_STATE_VERIFIED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VERIFICATION_STATE_SUSPENDED_IN_GMB")]
        VERIFICATION_STATE_SUSPENDED_IN_GMB = 4,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603