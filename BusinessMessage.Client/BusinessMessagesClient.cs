//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace BusinessMessage.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageClient 
    {
        private string _baseUrl = "http://businessmessages.googleapis.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MessageClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Sends a message from an agent to a user. If a conversation doesn't exist or an agent tries to send a message in a conversation that it isn't authorized to participate in, returns a `PERMISSION DENIED` error.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the message. Resolves to "conversations/{conversationId}".</param>
        /// <param name="forceFallback">Optional. A flag to send the specified fallback text instead of other message content. Only available to agents that aren't launched. If the flag is true and fallback text isn't specified, Business Messages returns an error.</param>
        /// <param name="message">Required. The content of a message.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BusinessMessagesMessage> CreateMessageAsync(string conversationsId, bool? forceFallback, BusinessMessagesMessage message)
        {
            return CreateMessageAsync(conversationsId, forceFallback, message, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sends a message from an agent to a user. If a conversation doesn't exist or an agent tries to send a message in a conversation that it isn't authorized to participate in, returns a `PERMISSION DENIED` error.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the message. Resolves to "conversations/{conversationId}".</param>
        /// <param name="forceFallback">Optional. A flag to send the specified fallback text instead of other message content. Only available to agents that aren't launched. If the flag is true and fallback text isn't specified, Business Messages returns an error.</param>
        /// <param name="message">Required. The content of a message.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BusinessMessagesMessage> CreateMessageAsync(string conversationsId, bool? forceFallback, BusinessMessagesMessage message, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationsId == null)
                throw new System.ArgumentNullException("conversationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/conversations/{conversationsId}/messages?");
            urlBuilder_.Replace("{conversationsId}", System.Uri.EscapeDataString(ConvertToString(conversationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (forceFallback != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("forceFallback") + "=").Append(System.Uri.EscapeDataString(ConvertToString(forceFallback, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(message, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BusinessMessagesMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an event in a conversation.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the message. Resolves to "conversations/{conversationId}".</param>
        /// <param name="eventId">The unique identifier of the event, assigned by the agent. If an event has the same `eventId` as a previous event in the conversation, Business Messages returns an `ALREADY_EXISTS` error.</param>
        /// <param name="event">Required. The content of an event.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BusinessMessagesEvent> CreateEventAsync(string conversationsId, string eventId, BusinessMessagesEvent @event)
        {
            return CreateEventAsync(conversationsId, eventId, @event, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an event in a conversation.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the message. Resolves to "conversations/{conversationId}".</param>
        /// <param name="eventId">The unique identifier of the event, assigned by the agent. If an event has the same `eventId` as a previous event in the conversation, Business Messages returns an `ALREADY_EXISTS` error.</param>
        /// <param name="event">Required. The content of an event.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BusinessMessagesEvent> CreateEventAsync(string conversationsId, string eventId, BusinessMessagesEvent @event, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationsId == null)
                throw new System.ArgumentNullException("conversationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/conversations/{conversationsId}/events?");
            urlBuilder_.Replace("{conversationsId}", System.Uri.EscapeDataString(ConvertToString(conversationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (eventId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(@event, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BusinessMessagesEvent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a customer satisfaction survey in a conversation. If an agent sends multiple surveys in the same conversation within 24 hours, Business Messages only attempts to send the first survey to the user.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the survey. Resolves to "conversations/{conversationId}".</param>
        /// <param name="surveyId">The unique identifier of the survey, assigned by the agent. If a survey attempts to use the same `surveyId` as a previous survey, Business Messages ignores the request.</param>
        /// <param name="survey">Required. The content of a survey.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BusinessMessagesSurvey> CreateSurveyAsync(string conversationsId, string surveyId, BusinessMessagesSurvey survey)
        {
            return CreateSurveyAsync(conversationsId, surveyId, survey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a customer satisfaction survey in a conversation. If an agent sends multiple surveys in the same conversation within 24 hours, Business Messages only attempts to send the first survey to the user.
        /// </remarks>
        /// <param name="conversationsId">Part of `parent`. Required. The conversation that contains the survey. Resolves to "conversations/{conversationId}".</param>
        /// <param name="surveyId">The unique identifier of the survey, assigned by the agent. If a survey attempts to use the same `surveyId` as a previous survey, Business Messages ignores the request.</param>
        /// <param name="survey">Required. The content of a survey.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BusinessMessagesSurvey> CreateSurveyAsync(string conversationsId, string surveyId, BusinessMessagesSurvey survey, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationsId == null)
                throw new System.ArgumentNullException("conversationsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/conversations/{conversationsId}/surveys?");
            urlBuilder_.Replace("{conversationsId}", System.Uri.EscapeDataString(ConvertToString(conversationsId, System.Globalization.CultureInfo.InvariantCulture)));
            if (surveyId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("surveyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(surveyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(survey, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BusinessMessagesSurvey>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Sends a receipt for a message from an agent to a user.
        /// </remarks>
        /// <param name="conversationsId">Part of `receipt.name`. The name of the receipt, as set by Business Messages. Resolves to "conversations/{conversationId}/messages/{messageId}/receipt", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.</param>
        /// <param name="messagesId">Part of `receipt.name`. See documentation of `conversationsId`.</param>
        /// <param name="receipt">The content of a receipt.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BusinessMessagesReceipt> UpdateReceiptAsync(string conversationsId, string messagesId, BusinessMessagesReceipt receipt)
        {
            return UpdateReceiptAsync(conversationsId, messagesId, receipt, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sends a receipt for a message from an agent to a user.
        /// </remarks>
        /// <param name="conversationsId">Part of `receipt.name`. The name of the receipt, as set by Business Messages. Resolves to "conversations/{conversationId}/messages/{messageId}/receipt", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.</param>
        /// <param name="messagesId">Part of `receipt.name`. See documentation of `conversationsId`.</param>
        /// <param name="receipt">The content of a receipt.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BusinessMessagesReceipt> UpdateReceiptAsync(string conversationsId, string messagesId, BusinessMessagesReceipt receipt, System.Threading.CancellationToken cancellationToken)
        {
            if (conversationsId == null)
                throw new System.ArgumentNullException("conversationsId");

            if (messagesId == null)
                throw new System.ArgumentNullException("messagesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/conversations/{conversationsId}/messages/{messagesId}/receipt");
            urlBuilder_.Replace("{conversationsId}", System.Uri.EscapeDataString(ConvertToString(conversationsId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{messagesId}", System.Uri.EscapeDataString(ConvertToString(messagesId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(receipt, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BusinessMessagesReceipt>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// A survey to measure customer satisfaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesSurvey
    {
        /// <summary>
        /// The name of the survey, as set by Business Messages. Resolves to "conversations/{conversationId}/surveys/{surveyId}", where {conversationId} is the unique ID for the conversation and {surveyId} is the unique ID for the survey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// Opens the user's default dialer app with the specified phone number filled in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesDialAction
    {
        /// <summary>
        /// Required. The specified phone number, in [RFC 3966](https://tools.ietf.org/html/rfc3966) format. For example, "+1-201-555-0123".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

    }

    /// <summary>
    /// An event in a conversation between an agent and a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesEvent
    {
        /// <summary>
        /// The type of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessMessagesEventEventType? EventType { get; set; }

        /// <summary>
        /// The name of the event, as set by Business Messages. Resolves to "conversations/{conversationId}/events/{eventId}", where {conversationId} is the unique ID for the conversation and {eventId} is the unique ID for the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details about the representative (human or chatbot) that sent the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("representative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesRepresentative Representative { get; set; }

    }

    /// <summary>
    /// When tapped, initiates the corresponding native action on the device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesSuggestedAction
    {
        /// <summary>
        /// The string that the agent receives when a user taps the suggested action. Maximum 2,048 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

        /// <summary>
        /// Text that is shown in the suggested action. Maximum 25 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// Opens the user's default dialer app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dialAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesDialAction DialAction { get; set; }

        /// <summary>
        /// Opens the specified URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openUrlAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesOpenUrlAction OpenUrlAction { get; set; }

    }

    /// <summary>
    /// When tapped, sends a request for a live agent to join the conversation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesLiveAgentRequest
    {

    }

    /// <summary>
    /// When tapped, sends the text reply back to the agent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesSuggestedReply
    {
        /// <summary>
        /// Text that is shown in the suggested reply and sent to the agent when the user taps it. Maximum 25 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The string that the agent receives when a user taps the suggested reply. Maximum 2,048 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postbackData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostbackData { get; set; }

    }

    /// <summary>
    /// A standalone rich card or a carousel of rich cards sent from the agent to the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesRichCard
    {
        /// <summary>
        /// Carousel of cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("carouselCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesCarouselCard CarouselCard { get; set; }

        /// <summary>
        /// Standalone card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standaloneCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesStandaloneCard StandaloneCard { get; set; }

    }

    /// <summary>
    /// A media file within a rich card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesMedia
    {
        /// <summary>
        /// Information about a file, including the URL of the file and the URL of the file's thumbnail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesContentInfo ContentInfo { get; set; }

        /// <summary>
        /// The height of the media within a rich card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessMessagesMediaHeight? Height { get; set; }

    }

    /// <summary>
    /// Details about the representative (human or chatbot) that sent the message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesRepresentative
    {
        /// <summary>
        /// Optional. Name of the representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Required. The type of representative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("representativeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessMessagesRepresentativeRepresentativeType? RepresentativeType { get; set; }

        /// <summary>
        /// Optional. The representative's avatar image, as a publicly available URL. Displays as a circle. Avatar images don't support personal information, such as depictions of representatives in photographs or illustrations. Use images that don't identify individuals, such as icons, logos, or fictitious illustrations. After an avatar image is used in a message, the image can't be modified or deleted. Images must be 1024x1024 px and have a maximum files size of 50 KB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarImage { get; set; }

    }

    /// <summary>
    /// Details for authentication via OAuth.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesAuthenticationRequestOauth
    {
        /// <summary>
        /// Required. The [code challenge](https://tools.ietf.org/html/rfc7636#section-4.2) used to exchange access tokens.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChallenge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeChallenge { get; set; }

        /// <summary>
        /// Required. The [ID](https://www.oauth.com/oauth2-servers/client-registration/client-id-secret/) of the application that asks for authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        /// <summary>
        /// Optional. The [code challenge method](https://www.oauth.com/oauth2-servers/pkce/authorization-request/) used to generate the code challenge. If this parameter is omitted, the server assumes `plain`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChallengeMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeChallengeMethod { get; set; }

        /// <summary>
        /// Required. An array that specifies the [scopes](https://oauth.net/2/scope/) of the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Scopes { get; set; }

    }

    /// <summary>
    /// Request to authenticate a conversation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesAuthenticationRequest
    {
        /// <summary>
        /// Details for authentication via OAuth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oauth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesAuthenticationRequestOauth Oauth { get; set; }

    }

    /// <summary>
    /// Carousel of cards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesCarouselCard
    {
        /// <summary>
        /// The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardContents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessMessagesCardContent> CardContents { get; set; }

        /// <summary>
        /// The width of the cards in the carousel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessMessagesCarouselCardCardWidth? CardWidth { get; set; }

    }

    /// <summary>
    /// A message in a conversation between an agent and a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesMessage
    {
        /// <summary>
        /// Optional. Fallback text that displays if the user's device doesn't support the message type or content. Maximum 3,072 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fallback", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fallback { get; set; }

        /// <summary>
        /// Details about the representative (human or chatbot) that sent the message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("representative", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesRepresentative Representative { get; set; }

        /// <summary>
        /// Image message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesImage Image { get; set; }

        /// <summary>
        /// Text message. Maximum 3,072 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// A list of suggested replies that appear as a list of suggestion chips following the associated message. Maximum 13 suggestions. The chips only display when the associated message is the most recent message within the conversation (including both agent and user messages). The user can tap a suggested reply to send the text reply to the agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessMessagesSuggestion> Suggestions { get; set; }

        /// <summary>
        /// Rich Card message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("richCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesRichCard RichCard { get; set; }

        /// <summary>
        /// The name of the message, as set by Business Messages. Resolves to "conversations/{conversationId}/messages/{messageId}", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Optional. If `true`, indicates that the message contains rich text. If the message contains invalid formatting, Business Messages returns an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("containsRichText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContainsRichText { get; set; }

        /// <summary>
        /// Required. The unique identifier of the message, assigned by the agent. If a message attempts to use the same `messageId` as a previous message, the proper delivery of the message could be affected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }

    }

    /// <summary>
    /// Card content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesCardContent
    {
        /// <summary>
        /// Optional. Media to include in the card.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("media", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesMedia Media { get; set; }

        /// <summary>
        /// Optional. List of suggestions to include in the card. Maximum 4 suggestions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suggestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BusinessMessagesSuggestion> Suggestions { get; set; }

        /// <summary>
        /// Optional. Title of the card. Maximum 200 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Optional. Description of the card. Maximum 2,000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// A receipt of the message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesReceipt
    {
        /// <summary>
        /// The name of the receipt, as set by Business Messages. Resolves to "conversations/{conversationId}/messages/{messageId}/receipt", where {conversationId} is the unique ID for the conversation and {messageId} is the unique ID for the message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A receipt type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessMessagesReceiptReceiptType? ReceiptType { get; set; }

    }

    /// <summary>
    /// A suggestion within a chip list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesSuggestion
    {
        /// <summary>
        /// A request to start authentication flow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesAuthenticationRequest AuthenticationRequest { get; set; }

        /// <summary>
        /// A suggestion for the user to reply with specified text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesSuggestedReply Reply { get; set; }

        /// <summary>
        /// A suggested action that initiates a native action on the device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesSuggestedAction Action { get; set; }

        /// <summary>
        /// A request to have a live agent join the conversation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liveAgentRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesLiveAgentRequest LiveAgentRequest { get; set; }

    }

    /// <summary>
    /// Opens the specified URL.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesOpenUrlAction
    {
        /// <summary>
        /// URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    /// <summary>
    /// Standalone card.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesStandaloneCard
    {
        /// <summary>
        /// Card content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cardContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesCardContent CardContent { get; set; }

    }

    /// <summary>
    /// An image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesImage
    {
        /// <summary>
        /// Information about an image, including the URL of the image and the URL of the image's thumbnail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessMessagesContentInfo ContentInfo { get; set; }

    }

    /// <summary>
    /// Message containing the content information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BusinessMessagesContentInfo
    {
        /// <summary>
        /// Optional. Publicly reachable URL of the thumbnail. If you don't provide a thumbnail URL, the platform displays a blank placeholder thumbnail until the user's device downloads the file. Maximum 25 KB. Supported content types: image/jpeg, image/jpg, image/png, image/webp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnailUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Publicly reachable URL of the file. The platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL. Maximum 5 MB. Supported content types: image/jpeg, image/jpg, image/png, image/webp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUrl { get; set; }

        /// <summary>
        /// If set, the platform fetches the file and thumbnail from the specified URLs, even if the platform has cached copies of the file (and/or of the thumbnail).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceRefresh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceRefresh { get; set; }

        /// <summary>
        /// Text describing the details about the media for accessibility purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltText { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessMessagesEventEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_TYPE_UNSPECIFIED")]
        EVENT_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPING_STARTED")]
        TYPING_STARTED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TYPING_STOPPED")]
        TYPING_STOPPED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPRESENTATIVE_JOINED")]
        REPRESENTATIVE_JOINED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REPRESENTATIVE_LEFT")]
        REPRESENTATIVE_LEFT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessMessagesMediaHeight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HEIGHT_UNSPECIFIED")]
        HEIGHT_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SHORT")]
        SHORT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TALL")]
        TALL = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessMessagesRepresentativeRepresentativeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"REPRESENTATIVE_TYPE_UNSPECIFIED")]
        REPRESENTATIVE_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BOT")]
        BOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HUMAN")]
        HUMAN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessMessagesCarouselCardCardWidth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CARD_WIDTH_UNSPECIFIED")]
        CARD_WIDTH_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SMALL")]
        SMALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BusinessMessagesReceiptReceiptType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RECEIPT_TYPE_UNSPECIFIED")]
        RECEIPT_TYPE_UNSPECIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"READ")]
        READ = 1,

    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603